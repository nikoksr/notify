// Code generated by mockery v2.14.0. DO NOT EDIT.

package viber

import (
	mileusnaviber "github.com/mileusna/viber"
	mock "github.com/stretchr/testify/mock"
)

// mockViberClient is an autogenerated mock type for the viberClient type
type mockViberClient struct {
	mock.Mock
}

// SendTextMessage provides a mock function with given fields: receiver, msg
func (_m *mockViberClient) SendTextMessage(receiver string, msg string) (uint64, error) {
	ret := _m.Called(receiver, msg)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string, string) uint64); ok {
		r0 = rf(receiver, msg)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(receiver, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetWebhook provides a mock function with given fields: url, eventTypes
func (_m *mockViberClient) SetWebhook(url string, eventTypes []string) (mileusnaviber.WebhookResp, error) {
	ret := _m.Called(url, eventTypes)

	var r0 mileusnaviber.WebhookResp
	if rf, ok := ret.Get(0).(func(string, []string) mileusnaviber.WebhookResp); ok {
		r0 = rf(url, eventTypes)
	} else {
		r0 = ret.Get(0).(mileusnaviber.WebhookResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(url, eventTypes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockViberClient interface {
	mock.TestingT
	Cleanup(func())
}

// newMockViberClient creates a new instance of mockViberClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockViberClient(t mockConstructorTestingTnewMockViberClient) *mockViberClient {
	mock := &mockViberClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
