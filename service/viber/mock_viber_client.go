// Code generated by mockery v2.43.2. DO NOT EDIT.

package viber

import (
	mileusnaviber "github.com/mileusna/viber"
	mock "github.com/stretchr/testify/mock"
)

// mockviberClient is an autogenerated mock type for the viberClient type
type mockviberClient struct {
	mock.Mock
}

type mockviberClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockviberClient) EXPECT() *mockviberClient_Expecter {
	return &mockviberClient_Expecter{mock: &_m.Mock}
}

// SendTextMessage provides a mock function with given fields: receiver, msg
func (_m *mockviberClient) SendTextMessage(receiver string, msg string) (uint64, error) {
	ret := _m.Called(receiver, msg)

	if len(ret) == 0 {
		panic("no return value specified for SendTextMessage")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (uint64, error)); ok {
		return rf(receiver, msg)
	}
	if rf, ok := ret.Get(0).(func(string, string) uint64); ok {
		r0 = rf(receiver, msg)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(receiver, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockviberClient_SendTextMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTextMessage'
type mockviberClient_SendTextMessage_Call struct {
	*mock.Call
}

// SendTextMessage is a helper method to define mock.On call
//   - receiver string
//   - msg string
func (_e *mockviberClient_Expecter) SendTextMessage(receiver interface{}, msg interface{}) *mockviberClient_SendTextMessage_Call {
	return &mockviberClient_SendTextMessage_Call{Call: _e.mock.On("SendTextMessage", receiver, msg)}
}

func (_c *mockviberClient_SendTextMessage_Call) Run(run func(receiver string, msg string)) *mockviberClient_SendTextMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockviberClient_SendTextMessage_Call) Return(_a0 uint64, _a1 error) *mockviberClient_SendTextMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockviberClient_SendTextMessage_Call) RunAndReturn(run func(string, string) (uint64, error)) *mockviberClient_SendTextMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SetWebhook provides a mock function with given fields: url, eventTypes
func (_m *mockviberClient) SetWebhook(url string, eventTypes []string) (mileusnaviber.WebhookResp, error) {
	ret := _m.Called(url, eventTypes)

	if len(ret) == 0 {
		panic("no return value specified for SetWebhook")
	}

	var r0 mileusnaviber.WebhookResp
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (mileusnaviber.WebhookResp, error)); ok {
		return rf(url, eventTypes)
	}
	if rf, ok := ret.Get(0).(func(string, []string) mileusnaviber.WebhookResp); ok {
		r0 = rf(url, eventTypes)
	} else {
		r0 = ret.Get(0).(mileusnaviber.WebhookResp)
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(url, eventTypes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockviberClient_SetWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWebhook'
type mockviberClient_SetWebhook_Call struct {
	*mock.Call
}

// SetWebhook is a helper method to define mock.On call
//   - url string
//   - eventTypes []string
func (_e *mockviberClient_Expecter) SetWebhook(url interface{}, eventTypes interface{}) *mockviberClient_SetWebhook_Call {
	return &mockviberClient_SetWebhook_Call{Call: _e.mock.On("SetWebhook", url, eventTypes)}
}

func (_c *mockviberClient_SetWebhook_Call) Run(run func(url string, eventTypes []string)) *mockviberClient_SetWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *mockviberClient_SetWebhook_Call) Return(_a0 mileusnaviber.WebhookResp, _a1 error) *mockviberClient_SetWebhook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockviberClient_SetWebhook_Call) RunAndReturn(run func(string, []string) (mileusnaviber.WebhookResp, error)) *mockviberClient_SetWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// newMockviberClient creates a new instance of mockviberClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockviberClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockviberClient {
	mock := &mockviberClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
