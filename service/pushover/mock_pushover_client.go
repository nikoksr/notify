// Code generated by mockery v2.43.2. DO NOT EDIT.

package pushover

import (
	gregdelpushover "github.com/gregdel/pushover"
	mock "github.com/stretchr/testify/mock"
)

// mockpushoverClient is an autogenerated mock type for the pushoverClient type
type mockpushoverClient struct {
	mock.Mock
}

type mockpushoverClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockpushoverClient) EXPECT() *mockpushoverClient_Expecter {
	return &mockpushoverClient_Expecter{mock: &_m.Mock}
}

// SendMessage provides a mock function with given fields: _a0, _a1
func (_m *mockpushoverClient) SendMessage(_a0 *gregdelpushover.Message, _a1 *gregdelpushover.Recipient) (*gregdelpushover.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 *gregdelpushover.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*gregdelpushover.Message, *gregdelpushover.Recipient) (*gregdelpushover.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*gregdelpushover.Message, *gregdelpushover.Recipient) *gregdelpushover.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gregdelpushover.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*gregdelpushover.Message, *gregdelpushover.Recipient) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockpushoverClient_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type mockpushoverClient_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - _a0 *gregdelpushover.Message
//   - _a1 *gregdelpushover.Recipient
func (_e *mockpushoverClient_Expecter) SendMessage(_a0 interface{}, _a1 interface{}) *mockpushoverClient_SendMessage_Call {
	return &mockpushoverClient_SendMessage_Call{Call: _e.mock.On("SendMessage", _a0, _a1)}
}

func (_c *mockpushoverClient_SendMessage_Call) Run(run func(_a0 *gregdelpushover.Message, _a1 *gregdelpushover.Recipient)) *mockpushoverClient_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gregdelpushover.Message), args[1].(*gregdelpushover.Recipient))
	})
	return _c
}

func (_c *mockpushoverClient_SendMessage_Call) Return(_a0 *gregdelpushover.Response, _a1 error) *mockpushoverClient_SendMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockpushoverClient_SendMessage_Call) RunAndReturn(run func(*gregdelpushover.Message, *gregdelpushover.Recipient) (*gregdelpushover.Response, error)) *mockpushoverClient_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// newMockpushoverClient creates a new instance of mockpushoverClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockpushoverClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockpushoverClient {
	mock := &mockpushoverClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
