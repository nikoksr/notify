// Code generated by mockery v2.43.2. DO NOT EDIT.

package googlechat

import (
	mock "github.com/stretchr/testify/mock"
	chat "google.golang.org/api/chat/v1"
)

// mockSpacesMessageCreator is an autogenerated mock type for the SpacesMessageCreator type
type mockSpacesMessageCreator struct {
	mock.Mock
}

type mockSpacesMessageCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSpacesMessageCreator) EXPECT() *mockSpacesMessageCreator_Expecter {
	return &mockSpacesMessageCreator_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *mockSpacesMessageCreator) Create(_a0 string, _a1 *chat.Message) CallCreator {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 CallCreator
	if rf, ok := ret.Get(0).(func(string, *chat.Message) CallCreator); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CallCreator)
		}
	}

	return r0
}

// mockSpacesMessageCreator_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockSpacesMessageCreator_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 string
//   - _a1 *chat.Message
func (_e *mockSpacesMessageCreator_Expecter) Create(_a0 interface{}, _a1 interface{}) *mockSpacesMessageCreator_Create_Call {
	return &mockSpacesMessageCreator_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *mockSpacesMessageCreator_Create_Call) Run(run func(_a0 string, _a1 *chat.Message)) *mockSpacesMessageCreator_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*chat.Message))
	})
	return _c
}

func (_c *mockSpacesMessageCreator_Create_Call) Return(_a0 CallCreator) *mockSpacesMessageCreator_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSpacesMessageCreator_Create_Call) RunAndReturn(run func(string, *chat.Message) CallCreator) *mockSpacesMessageCreator_Create_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSpacesMessageCreator creates a new instance of mockSpacesMessageCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSpacesMessageCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSpacesMessageCreator {
	mock := &mockSpacesMessageCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
