// Code generated by mockery v2.43.2. DO NOT EDIT.

package lark

import mock "github.com/stretchr/testify/mock"

// mocksendToer is an autogenerated mock type for the sendToer type
type mocksendToer struct {
	mock.Mock
}

type mocksendToer_Expecter struct {
	mock *mock.Mock
}

func (_m *mocksendToer) EXPECT() *mocksendToer_Expecter {
	return &mocksendToer_Expecter{mock: &_m.Mock}
}

// SendTo provides a mock function with given fields: subject, message, id, idType
func (_m *mocksendToer) SendTo(subject string, message string, id string, idType string) error {
	ret := _m.Called(subject, message, id, idType)

	if len(ret) == 0 {
		panic("no return value specified for SendTo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(subject, message, id, idType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mocksendToer_SendTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTo'
type mocksendToer_SendTo_Call struct {
	*mock.Call
}

// SendTo is a helper method to define mock.On call
//   - subject string
//   - message string
//   - id string
//   - idType string
func (_e *mocksendToer_Expecter) SendTo(subject interface{}, message interface{}, id interface{}, idType interface{}) *mocksendToer_SendTo_Call {
	return &mocksendToer_SendTo_Call{Call: _e.mock.On("SendTo", subject, message, id, idType)}
}

func (_c *mocksendToer_SendTo_Call) Run(run func(subject string, message string, id string, idType string)) *mocksendToer_SendTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mocksendToer_SendTo_Call) Return(_a0 error) *mocksendToer_SendTo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mocksendToer_SendTo_Call) RunAndReturn(run func(string, string, string, string) error) *mocksendToer_SendTo_Call {
	_c.Call.Return(run)
	return _c
}

// newMocksendToer creates a new instance of mocksendToer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMocksendToer(t interface {
	mock.TestingT
	Cleanup(func())
}) *mocksendToer {
	mock := &mocksendToer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
