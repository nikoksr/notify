// Code generated by mockery v2.35.1. DO NOT EDIT.

package zulip

import (
	client "github.com/nikoksr/notify/service/zulip/client"
	mock "github.com/stretchr/testify/mock"
)

// mockZulipClient is an autogenerated mock type for the zulipClient type
type mockZulipClient struct {
	mock.Mock
}

// Send provides a mock function with given fields: msg
func (_m *mockZulipClient) Send(msg *client.Message) (*client.Response, error) {
	ret := _m.Called(msg)

	var r0 *client.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.Message) (*client.Response, error)); ok {
		return rf(msg)
	}
	if rf, ok := ret.Get(0).(func(*client.Message) *client.Response); ok {
		r0 = rf(msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.Message) error); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockZulipClient creates a new instance of mockZulipClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockZulipClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockZulipClient {
	mock := &mockZulipClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
