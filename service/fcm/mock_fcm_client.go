// Code generated by mockery v2.43.2. DO NOT EDIT.

package fcm

import (
	context "context"

	messaging "firebase.google.com/go/v4/messaging"
	mock "github.com/stretchr/testify/mock"
)

// mockfcmClient is an autogenerated mock type for the fcmClient type
type mockfcmClient struct {
	mock.Mock
}

type mockfcmClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockfcmClient) EXPECT() *mockfcmClient_Expecter {
	return &mockfcmClient_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: ctx, message
func (_m *mockfcmClient) Send(ctx context.Context, message ...*messaging.Message) (*messaging.BatchResponse, error) {
	_va := make([]interface{}, len(message))
	for _i := range message {
		_va[_i] = message[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 *messaging.BatchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*messaging.Message) (*messaging.BatchResponse, error)); ok {
		return rf(ctx, message...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*messaging.Message) *messaging.BatchResponse); ok {
		r0 = rf(ctx, message...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messaging.BatchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*messaging.Message) error); ok {
		r1 = rf(ctx, message...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockfcmClient_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type mockfcmClient_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - message ...*messaging.Message
func (_e *mockfcmClient_Expecter) Send(ctx interface{}, message ...interface{}) *mockfcmClient_Send_Call {
	return &mockfcmClient_Send_Call{Call: _e.mock.On("Send",
		append([]interface{}{ctx}, message...)...)}
}

func (_c *mockfcmClient_Send_Call) Run(run func(ctx context.Context, message ...*messaging.Message)) *mockfcmClient_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*messaging.Message, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*messaging.Message)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *mockfcmClient_Send_Call) Return(_a0 *messaging.BatchResponse, _a1 error) *mockfcmClient_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockfcmClient_Send_Call) RunAndReturn(run func(context.Context, ...*messaging.Message) (*messaging.BatchResponse, error)) *mockfcmClient_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SendMulticast provides a mock function with given fields: ctx, message
func (_m *mockfcmClient) SendMulticast(ctx context.Context, message *messaging.MulticastMessage) (*messaging.BatchResponse, error) {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for SendMulticast")
	}

	var r0 *messaging.BatchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *messaging.MulticastMessage) (*messaging.BatchResponse, error)); ok {
		return rf(ctx, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *messaging.MulticastMessage) *messaging.BatchResponse); ok {
		r0 = rf(ctx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messaging.BatchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *messaging.MulticastMessage) error); ok {
		r1 = rf(ctx, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockfcmClient_SendMulticast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMulticast'
type mockfcmClient_SendMulticast_Call struct {
	*mock.Call
}

// SendMulticast is a helper method to define mock.On call
//   - ctx context.Context
//   - message *messaging.MulticastMessage
func (_e *mockfcmClient_Expecter) SendMulticast(ctx interface{}, message interface{}) *mockfcmClient_SendMulticast_Call {
	return &mockfcmClient_SendMulticast_Call{Call: _e.mock.On("SendMulticast", ctx, message)}
}

func (_c *mockfcmClient_SendMulticast_Call) Run(run func(ctx context.Context, message *messaging.MulticastMessage)) *mockfcmClient_SendMulticast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*messaging.MulticastMessage))
	})
	return _c
}

func (_c *mockfcmClient_SendMulticast_Call) Return(_a0 *messaging.BatchResponse, _a1 error) *mockfcmClient_SendMulticast_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockfcmClient_SendMulticast_Call) RunAndReturn(run func(context.Context, *messaging.MulticastMessage) (*messaging.BatchResponse, error)) *mockfcmClient_SendMulticast_Call {
	_c.Call.Return(run)
	return _c
}

// newMockfcmClient creates a new instance of mockfcmClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockfcmClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockfcmClient {
	mock := &mockfcmClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
