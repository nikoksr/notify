// Code generated by mockery v2.43.2. DO NOT EDIT.

package msteams

import (
	context "context"

	goteamsnotify "github.com/atc0005/go-teams-notify/v2"
	mock "github.com/stretchr/testify/mock"
)

// mockteamsClient is an autogenerated mock type for the teamsClient type
type mockteamsClient struct {
	mock.Mock
}

type mockteamsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockteamsClient) EXPECT() *mockteamsClient_Expecter {
	return &mockteamsClient_Expecter{mock: &_m.Mock}
}

// SendWithContext provides a mock function with given fields: ctx, webhookURL, webhookMessage
func (_m *mockteamsClient) SendWithContext(ctx context.Context, webhookURL string, webhookMessage goteamsnotify.MessageCard) error {
	ret := _m.Called(ctx, webhookURL, webhookMessage)

	if len(ret) == 0 {
		panic("no return value specified for SendWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, goteamsnotify.MessageCard) error); ok {
		r0 = rf(ctx, webhookURL, webhookMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockteamsClient_SendWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWithContext'
type mockteamsClient_SendWithContext_Call struct {
	*mock.Call
}

// SendWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - webhookURL string
//   - webhookMessage goteamsnotify.MessageCard
func (_e *mockteamsClient_Expecter) SendWithContext(ctx interface{}, webhookURL interface{}, webhookMessage interface{}) *mockteamsClient_SendWithContext_Call {
	return &mockteamsClient_SendWithContext_Call{Call: _e.mock.On("SendWithContext", ctx, webhookURL, webhookMessage)}
}

func (_c *mockteamsClient_SendWithContext_Call) Run(run func(ctx context.Context, webhookURL string, webhookMessage goteamsnotify.MessageCard)) *mockteamsClient_SendWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(goteamsnotify.MessageCard))
	})
	return _c
}

func (_c *mockteamsClient_SendWithContext_Call) Return(_a0 error) *mockteamsClient_SendWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockteamsClient_SendWithContext_Call) RunAndReturn(run func(context.Context, string, goteamsnotify.MessageCard) error) *mockteamsClient_SendWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// SkipWebhookURLValidationOnSend provides a mock function with given fields: skip
func (_m *mockteamsClient) SkipWebhookURLValidationOnSend(skip bool) goteamsnotify.API {
	ret := _m.Called(skip)

	if len(ret) == 0 {
		panic("no return value specified for SkipWebhookURLValidationOnSend")
	}

	var r0 goteamsnotify.API
	if rf, ok := ret.Get(0).(func(bool) goteamsnotify.API); ok {
		r0 = rf(skip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(goteamsnotify.API)
		}
	}

	return r0
}

// mockteamsClient_SkipWebhookURLValidationOnSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SkipWebhookURLValidationOnSend'
type mockteamsClient_SkipWebhookURLValidationOnSend_Call struct {
	*mock.Call
}

// SkipWebhookURLValidationOnSend is a helper method to define mock.On call
//   - skip bool
func (_e *mockteamsClient_Expecter) SkipWebhookURLValidationOnSend(skip interface{}) *mockteamsClient_SkipWebhookURLValidationOnSend_Call {
	return &mockteamsClient_SkipWebhookURLValidationOnSend_Call{Call: _e.mock.On("SkipWebhookURLValidationOnSend", skip)}
}

func (_c *mockteamsClient_SkipWebhookURLValidationOnSend_Call) Run(run func(skip bool)) *mockteamsClient_SkipWebhookURLValidationOnSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *mockteamsClient_SkipWebhookURLValidationOnSend_Call) Return(_a0 goteamsnotify.API) *mockteamsClient_SkipWebhookURLValidationOnSend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockteamsClient_SkipWebhookURLValidationOnSend_Call) RunAndReturn(run func(bool) goteamsnotify.API) *mockteamsClient_SkipWebhookURLValidationOnSend_Call {
	_c.Call.Return(run)
	return _c
}

// newMockteamsClient creates a new instance of mockteamsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockteamsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockteamsClient {
	mock := &mockteamsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
