// Code generated by mockery v2.14.0. DO NOT EDIT.

package mattermost

import (
	model "github.com/mattermost/mattermost-server/v5/model"
	mock "github.com/stretchr/testify/mock"
)

// mockMattermostClient is an autogenerated mock type for the mattermostClient type
type mockMattermostClient struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: _a0
func (_m *mockMattermostClient) CreatePost(_a0 *model.Post) (*model.Post, *model.Response) {
	ret := _m.Called(_a0)

	var r0 *model.Post
	if rf, ok := ret.Get(0).(func(*model.Post) *model.Post); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	var r1 *model.Response
	if rf, ok := ret.Get(1).(func(*model.Post) *model.Response); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.Response)
		}
	}

	return r0, r1
}

// Login provides a mock function with given fields: loginID, password
func (_m *mockMattermostClient) Login(loginID string, password string) (*model.User, *model.Response) {
	ret := _m.Called(loginID, password)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string, string) *model.User); ok {
		r0 = rf(loginID, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 *model.Response
	if rf, ok := ret.Get(1).(func(string, string) *model.Response); ok {
		r1 = rf(loginID, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.Response)
		}
	}

	return r0, r1
}

type mockConstructorTestingTnewMockMattermostClient interface {
	mock.TestingT
	Cleanup(func())
}

// newMockMattermostClient creates a new instance of mockMattermostClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockMattermostClient(t mockConstructorTestingTnewMockMattermostClient) *mockMattermostClient {
	mock := &mockMattermostClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
