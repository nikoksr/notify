// Code generated by mockery v2.43.2. DO NOT EDIT.

package reddit

import (
	context "context"

	v3reddit "github.com/caarlos0/go-reddit/v3/reddit"
	mock "github.com/stretchr/testify/mock"
)

// mockredditMessageClient is an autogenerated mock type for the redditMessageClient type
type mockredditMessageClient struct {
	mock.Mock
}

type mockredditMessageClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockredditMessageClient) EXPECT() *mockredditMessageClient_Expecter {
	return &mockredditMessageClient_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: _a0, _a1
func (_m *mockredditMessageClient) Send(_a0 context.Context, _a1 *v3reddit.SendMessageRequest) (*v3reddit.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 *v3reddit.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v3reddit.SendMessageRequest) (*v3reddit.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v3reddit.SendMessageRequest) *v3reddit.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v3reddit.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v3reddit.SendMessageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockredditMessageClient_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type mockredditMessageClient_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v3reddit.SendMessageRequest
func (_e *mockredditMessageClient_Expecter) Send(_a0 interface{}, _a1 interface{}) *mockredditMessageClient_Send_Call {
	return &mockredditMessageClient_Send_Call{Call: _e.mock.On("Send", _a0, _a1)}
}

func (_c *mockredditMessageClient_Send_Call) Run(run func(_a0 context.Context, _a1 *v3reddit.SendMessageRequest)) *mockredditMessageClient_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v3reddit.SendMessageRequest))
	})
	return _c
}

func (_c *mockredditMessageClient_Send_Call) Return(_a0 *v3reddit.Response, _a1 error) *mockredditMessageClient_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockredditMessageClient_Send_Call) RunAndReturn(run func(context.Context, *v3reddit.SendMessageRequest) (*v3reddit.Response, error)) *mockredditMessageClient_Send_Call {
	_c.Call.Return(run)
	return _c
}

// newMockredditMessageClient creates a new instance of mockredditMessageClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockredditMessageClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockredditMessageClient {
	mock := &mockredditMessageClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
